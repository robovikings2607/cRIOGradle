/*
	gradle build script for 2014 cRIO Java
*/

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

// the squawk VM on the cRIO only supports up through Java 1.4, so restrict language features to that
sourceCompatibility = 1.4

// if your Java source files are not in the standard gradle location (i.e. in src/main/java within your 
// project directory, then uncomment the following line and update the path to point to them
// sourceSets.main.java.srcDirs = ["d:/frc-2016/gitRepos/Misc/cRIOTest-srcFiles"]

// Update the configuration parameters below to the values required for your project
project.ext {
   cRIOSDKDir = "d:/frc-2016/gitRepos/cRIOGradle/cRIO-build"	// SDK location
   cRIOIPAddr = "10.26.7.2"					// cRIO IP Address 10.TE.AM.2
   robotClassName = "PapalBull"					// name of your robot class
   robotPackage = "edu.archwood.frc2607"			// name of the package your robot class is in
}

/*===========================================================================================*/
// shouldn't need to change anything below this point

repositories {
    jcenter()
}

dependencies {
    compile files("$cRIOSDKDir/lib")    
}

// tasks to package & deploy FRC cRIO Java program
configurations {
    antTasks
}

dependencies {
    antTasks files("$cRIOSDKDir/sdktoolftp.jar","$cRIOSDKDir/bin/jakarta-oro-2.0.8.jar", 
    			 "$cRIOSDKDir/bin/commons-net-1.4.1.jar","$cRIOSDKDir/bin/ant-commons-net-1.9.4.jar")
}

clean.doFirst {
    println "Cleaning up cRIO-specific outputs"
    delete "${projectDir}/output/"
    delete "${projectDir}/bin/"
    delete fileTree(dir: "${projectDir}", include: 'robot.suite.*')
    delete fileTree(dir: "${projectDir}", include: 'robot.suite')
    delete fileTree(dir: "${projectDir}", include: 'robot.sym')
}

// the preverify task takes compiled Java classes as input
// the WPI and Squawk classes are in cRIOSDKDir\lib
// our compiled project classes are in projectDir\build\classes\main
// preverify should put all classes under projectDir\output, creating it if it doesn't exist
task cRIOPreverify(dependsOn: 'compileJava') {
    description 'cRIO Deploy Step 1a : preverify java classes'
    doLast {
        project.exec {
            commandLine = ["${cRIOSDKDir}/bin/preverify.exe", "${cRIOSDKDir}/lib",
                           "${sourceSets.main.output.classesDir}"]
        }
    }
}

task cRIOJar(dependsOn: cRIOPreverify, type: Jar) {
    description 'cRIO Deploy Step 2 : create jar file'
    String s = "${robotClassName}, , ${robotPackage}.${robotClassName}"
    manifest {
        attributes(
                "MIDlet-Name": "cRIO2014",
                "MIDlet-Version": "1.0.0",
                "MIDlet-Vendor": "FIRST",
                "MIDlet-1": s,
                "MicroEdition-Profile": "IMP-1.0",
                "MicroEdition-Configuration": "CLDC-1.1"
        )
    }
    from fileTree("${projectDir}/output")
}

task cRIOSuite(dependsOn: cRIOJar, type: JavaExec) {
    description 'cRIO Deploy Step 3 : generate suite'
    main = 'com.sun.squawk.Romizer'
    args = ["-nobuildproperties", "-suitepath:${cRIOSDKDir}/cRIO", "-boot:squawk", "-metadata", "-lnt",
            "-cp:${project.buildDir}/libs/${project.name}.jar", "-endian:big", "-o:robot",
            "${project.buildDir}/libs/${project.name}.jar"]
    classpath = files("${cRIOSDKDir}/bin/romizer_classes.jar", "${cRIOSDKDir}/bin/squawk.jar",
                 "${cRIOSDKDir}/bin/squawk_device_classes.jar", "${cRIOSDKDir}/bin/translator_classes.jar")
    jvmArgs = ["-XX:CompileCommand=exclude,com/sun/squawk/Method.getParameterTypes",
               "-XX:CompileCommand=exclude,com/sun/squawk/SymbolParser.getSignatureTypeAt",
               "-XX:CompileCommand=exclude,com/sun/squawk/SymbolParser.stripMethods", "-Xmx256M"]
}

task cRIODeploy(dependsOn: cRIOSuite) {
    description 'Deploy FRC robot program suite to cRIO'
    doLast {
        ant {
            taskdef(name: 'ftp',
                    classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
                    classpath: configurations.antTasks.asPath)
            ftp(server: "${cRIOIPAddr}", userid: "root", password: "", remotedir: "/ni-rt/system") {
		fileset(file: "${projectDir}/robot.suite")
            }
        }
    }
}

task upgradeTest {
   doLast {
   	ant {
   		taskdef(name: 'frcupgrade',
   			classname: 'com.sun.spot.sdk.tool.ftp.UpgradeTask',
   			classpath: configurations.antTasks.asPath)
   		frcupgrade(remoteaddress: "${cRIOIPAddr}")
   	}
   }
}
